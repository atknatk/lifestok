/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lifeweb.ui.urun;

import com.jidesoft.converter.ConverterContext;
import com.jidesoft.converter.DoubleConverter;
import com.jidesoft.grid.AbstractMultiTableModel;
import com.jidesoft.grid.CellStyle;
import com.jidesoft.grid.ColumnIdentifierTableModel;
import com.jidesoft.grid.HeaderStyleModel;
import com.jidesoft.grid.MultiTableModel;
import com.jidesoft.grid.StyleModel;
import com.jidesoft.grid.TableScrollPane;
import com.lifeweb.enitity.helper.DaoHelper;
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.SwingConstants;
import javax.swing.table.TableModel;

/**
 *
 * @author Atakan
 */
public class UrunDetayUI extends javax.swing.JFrame {

    protected MultiTableModel _totalModel;
    protected MultiTableModel _subHeaderModel;
    protected MultiTableModel _model;
    public TableScrollPane _pane;
    private static final long serialVersionUID = -5850105228695796397L;
    protected Color COLOR_MAIN = new Color(255, 254, 203);
    protected Color COLOR_HEADER = new Color(233, 254, 203);
    protected Color COLOR_CORNER = new Color(32, 32, 32);
    private static CellStyle SALES_STYLE = new CellStyle();
    private static CellStyle PROFITS_STYLE = new CellStyle();
    private static CellStyle BOLD_STYLE = new CellStyle();

    private static CellStyle FOOTER_STYLE = new CellStyle();

    static {
        SALES_STYLE.setForeground(new Color(0, 128, 0));
        SALES_STYLE.setHorizontalAlignment(SwingConstants.CENTER);
        PROFITS_STYLE.setForeground(Color.blue);
        PROFITS_STYLE.setHorizontalAlignment(SwingConstants.CENTER);
        BOLD_STYLE.setFontStyle(Font.BOLD);
        BOLD_STYLE.setHorizontalAlignment(SwingConstants.CENTER);

        FOOTER_STYLE.setForeground(Color.YELLOW);
    }

    public UrunDetayUI() {
        initComponents();
        TableScrollPane pane = new TableScrollPane();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 431, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(142, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    class DummyFooterTableModel extends AbstractMultiTableModel implements ColumnIdentifierTableModel, StyleModel {

        TableModel _model;
        private static final long serialVersionUID = -9132647394140127017L;

        public DummyFooterTableModel(TableModel model) {
            _model = model;
        }

        @Override
        public CellStyle getCellStyleAt(int rowIndex, int columnIndex) {
            return FOOTER_STYLE;
        }

        @Override
        public boolean isCellStyleOn() {
            return true;
        }

        @Override
        public String getColumnName(int column) {
            return _model.getColumnName(column);
        }

        @Override
        public Object getColumnIdentifier(int columnIndex) {
            return ((ColumnIdentifierTableModel) _model).getColumnIdentifier(columnIndex);
        }

        @Override
        public int getColumnCount() {
            return _model.getColumnCount();
        }

        @Override
        public int getRowCount() {
            return 1;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return _model.getColumnClass(columnIndex);
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                return "Toplam";
            } else if (columnIndex == 0) {
                Double summary = 0d;
                for (int i = 0; i < _model.getRowCount(); i++) {
                    Object value = _model.getValueAt(i, columnIndex);
                    if (value instanceof Double) {
                        summary += (Double) value;
                    }
                }
                return summary / 11;
            }
            return null;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public int getColumnType(int column) {
            return ((MultiTableModel) _model).getColumnType(column);
        }

        @Override
        public int getTableIndex(int columnIndex) {
            return 0;
        }

        @Override
        public Class<?> getCellClassAt(int row, int column) {
            return getColumnClass(column);
        }

        @Override
        public ConverterContext getConverterContextAt(int row, int column) {
            return column >= 1 ? DoubleConverter.CONTEXT_FRACTION_NUMBER : null;
        }
    }

    class DummyTableModel extends AbstractMultiTableModel implements ColumnIdentifierTableModel, HeaderStyleModel, StyleModel {

        int id;

        public DummyTableModel(int id) {
            this.id = id;
        }

        private static final long serialVersionUID = 7142342324546147914L;
        private final String[] header = new String[]{"Ürün Adı", "Fiş Tarihi", "Fiş Saati", "Miktar", "Birim Fiyatı", "İndirim Oranı", "İndirim Miktarı", "Tutar", "Kasiyer"};
        private final Object[][] data = getUrunDetayData(id);

        @Override
        public CellStyle getHeaderStyleAt(int rowIndex, int columnIndex) {
            if (columnIndex >= 1 && columnIndex <= 4) {
                return SALES_STYLE;
            } else if (columnIndex >= 5 && columnIndex <= 8) {
                return PROFITS_STYLE;
            }
            return BOLD_STYLE;
        }

        @Override
        public boolean isHeaderStyleOn() {
            return true;
        }

        @Override
        public CellStyle getCellStyleAt(int rowIndex, int columnIndex) {
            if (columnIndex >= 1 && columnIndex <= 4) {
                return SALES_STYLE;
            } else if (columnIndex >= 5 && columnIndex <= 8) {
                return PROFITS_STYLE;
            }
            return null;
        }

        @Override
        public boolean isCellStyleOn() {
            return true;
        }

        @Override
        public String getColumnName(int column) {
            return header[column];
        }

        @Override
        public Object getColumnIdentifier(int column) {
            return header[column];
        }

        @Override
        public int getColumnCount() {
            return header.length;
        }

        @Override
        public int getRowCount() {
            if (data==null) {
                return 0;
            }
             return data[0].length;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex==3||columnIndex==4||columnIndex==5||columnIndex==6||columnIndex==7) {
                return Double.class;
            }
            return String.class;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
             if (data==null) {
                return null;
            }
            return data[rowIndex][columnIndex];
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public int getTableIndex(int columnIndex) {
            return 0;
        }

        @Override
        public int getColumnType(int column) {
            if (column < 1) {
                return HEADER_COLUMN;
            } else if (column >= getColumnCount() - 2) {
                return FOOTER_COLUMN;
            } else {
                return REGULAR_COLUMN;
            }
        }

        @Override
        public Class<?> getCellClassAt(int row, int column) {
            return getColumnClass(column);
        }

        @Override
        public ConverterContext getConverterContextAt(int row, int column) {
            return column >= 3||column < 8 ? DoubleConverter.CONTEXT_FRACTION_NUMBER : null;
        }
    }

    private Object[][] getUrunDetayData(int id) {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        Object[][] data = null;
        try {
            con = DaoHelper.instance().getConnection();
            pstmt = con.prepareStatement("SELECT count(satis_fisi_line_id) FROM satis_fisi_line where urun_id=?");
            pstmt.setInt(1, id);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                int count = rs.getInt(1);
                pstmt = con.prepareStatement("SELECT ur.urun_adi,sf.fis_tarihi, sf.fis_saati,sfl.miktar,sfl.birim_fiyati, sfl.indirim_orani,sfl.birim_fiyati-sfl.tutar as indirim_miktari, sfl.tutar,concat(kul.adi,' ',kul.soyadi) as isim FROM satis_fisi_line  as sfl left join  satis_fisi as sf on sf.SATIS_FISI_ID=sfl.SATIS_FISI_ID left join urunler as ur on ur.urun_id=sfl.urun_id left join odeme_turleri_line as otl on otl.satis_fisi_id=sf.satis_fisi_id left join odeme_turleri as ot on ot.odeme_id=otl.odeme_id left join kullanici as kul on kul.KULLANICI_ID=sf.sys_ekleyen where ur.urun_id=?");
                pstmt.setInt(1, id);
                rs = pstmt.executeQuery();

                data = new Object[count][8];
                int i = 0;
                Format formatter = new SimpleDateFormat("dd MMMM yyyy, EEEE");
                while (rs.next()) {
                    data[i][0] = rs.getString(1);
                    data[i][1] = formatter.format(new Date(rs.getDate(2).getTime()));
                    data[i][2] = rs.getDate(3);
                    data[i][3] = rs.getDouble(4);
                    data[i][4] = rs.getDouble(5);
                    data[i][5] = rs.getDouble(6);
                    data[i][6] = rs.getDouble(7);
                    data[i][7] = rs.getDouble(8);
                    data[i][8] = rs.getString(9);
                    i++;
                }
            }

            rs.close();
            pstmt.close();

        } catch (SQLException e) {
        } 
        return data;
    }
}
